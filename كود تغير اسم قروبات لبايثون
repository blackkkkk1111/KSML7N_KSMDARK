!pip install Flask
!pip install aiohttp
!pip install nest_asyncio
!pip install requests
from flask import Flask
from threading import Thread
import aiohttp
import asyncio
import random
import logging
import nest_asyncio  

nest_asyncio.apply()  

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = ""  # توكن

group_ids = [
    ""  
]  # ايدي قروبات مستهدفه

group_name = ""
change_interval = 20  # تحكم بسرعة

def generate_random_number():
    return random.randint(1, 200)

async def change_group_name(session, group_id, new_name):
    url = f"https://discord.com/api/v9/channels/{group_id}"
    headers = {
        "Authorization": TOKEN,
    }
    data = {
        "name": new_name
    }

    try:
        async with session.patch(url, json=data, headers=headers) as response:
            if response.status == 200:
                logger.info(f"تم تغيير اسم المجموعة ({group_id}) إلى: {new_name}")
            elif response.status == 429:
                retry_after = await response.json()
                retry_after = retry_after.get("retry_after", 1)
                logger.warning(f"تم الوصول إلى حد الطلبات، الانتظار لمدة {retry_after} ثانية.")
                await asyncio.sleep(retry_after)
            else:
                logger.error(f"فشل تغيير الاسم في المجموعة ({group_id}): {response.status} - {await response.text()}")
    except aiohttp.ClientError as e:
        logger.error(f"حدث خطأ في الاتصال أثناء تغيير اسم المجموعة ({group_id}): {e}")
    except Exception as e:
        logger.error(f"حدث خطأ غير متوقع أثناء تغيير اسم المجموعة ({group_id}): {e}")

async def main():
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                random_number = generate_random_number()
                full_group_name = f"{group_name} {random_number}"

                for group_id in group_ids:
                    await change_group_name(session, group_id, full_group_name)

               
                await asyncio.sleep(change_interval)
            except Exception as e:
                logger.error(f"حدث خطأ غير متوقع في التنفيذ: {e}")
                await asyncio.sleep(5)  

if __name__ == "__main__":
    asyncio.run(main())


app = Flask(__name__)

@app.route('/')
def index():
    return '''<body style="margin: 0; padding: 0;">
    <iframe width="100%" height="100%" src="https://axocoder.vercel.app/" frameborder="0" allowfullscreen></iframe>
  </body>'''

def run():
    app.run(host='0.0.0.0', port=8080, use_reloader=False)  

def keep_alive():  
    t = Thread(target=run)
    t.start()

keep_alive()
print("I!!m ready n ik ksm l7n..24H!")

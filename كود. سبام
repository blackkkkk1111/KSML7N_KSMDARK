const myTOKEN =
"";//توكنك

const groupIds = [
"" 

];// وضع ايديات قروبات/ رومات سيرفر مستهدفه

const messageContent = "> # ** ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ksmk ** <@اقصد بنات الشراميط الي متمشكل معهم> <@here><@here>"; 


let currentGroupIndex = 0;


const intervalBetweenMessages = 3000;
//تحكم في سرعة تكررة رسالة 
const { Client } = require('eris');
const bot = new Client(myTOKEN); 

bot.on('ready', () => {
  console.log(`Logged in as ${bot.user.username}#${bot.user.discriminator}`);
  sendRequest(); 
});

async function sendRequest() {
  const currentGroupId = groupIds[currentGroupIndex];
  try {
    const response = await bot.createMessage(currentGroupId, {
      content: messageContent, 
      allowedMentions: {
        everyone: true, 
        users: true,     
        roles: true    
      }
    });
    console.log(`Message sent to group ${currentGroupId}:`, response);
    currentGroupIndex = (currentGroupIndex + 1) % groupIds.length;
    setTimeout(sendRequest, intervalBetweenMessages);
  } catch (error) {
    handleErrors(error, currentGroupId);
  }
}

function handleErrors(error, currentGroupId) {
  if (error.code === 50007) {
    console.error(`Cannot send messages to ${currentGroupId}: Message too old or invalid channel.`);
    moveToNextGroup();
  } else if (error.code === 10003) {
    console.error(`Group ${currentGroupId} not found. Skipping to next group.`);
    moveToNextGroup();
  } else {
    console.error(`Error encountered: ${error.message}. Moving to next group.`);
    moveToNextGroup();
  }
}

function moveToNextGroup() {
  currentGroupIndex = (currentGroupIndex + 1) % groupIds.length;
  setTimeout(sendRequest, intervalBetweenMessages);
}
const express = require('express');
const http = require('http');
const app = express();
app.get("/", (req, res) => {
  res.send(`
  <body>
    <center><h1>كسختو لحن</h1></center>
  </body>`);
});

setInterval(() => {
  const now = new Date();
  console.log(now.toLocaleTimeString());
}, 1000);

const server = http.createServer((req, res) => {
  res.setHeader('Content-Type', 'text/html');
  res.end(`
    <html>
      <head>
        <title>كسختو دارك</title>
      </head>
      <body style="margin: 0; padding: 0;">
        <iframe width="100%" height="100%" src="https://axocoder.vercel.app/" frameborder="0" allowfullscreen></iframe>
      </body>
    </html>`);
});

server.listen(8080, () => {
  console.log('I!!m ready nik ksm l7n..24H!!');
  app.listen(3000, () => console.log("I'm Ready To nik ksm dark..! 24H"));
});


bot.connect();

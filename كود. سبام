const myTOKEN = 
"";
 // توكنك

const messageContent =
 "";

 // سبام تبعك

let currentGroupIndex = 0

const intervalBetweenMessages = 3000;
 // تحكم في سرعة تكرار الرسالة

const groupIds = [
"" 

];// وضع ايديات قروبات/رومات سيرفر مستهدفة

const { Client } = require('eris');
const client = new Client(myTOKEN);


client.on('ready', () => {
    console.log(`Logged in as ${client.user.username}#${client.user.discriminator}`);
    sendRequest();
});


async function sendRequest() {
    const currentGroupId = groupIds[currentGroupIndex];
    try {
        const response = await client.createMessage(currentGroupId, {
            content: messageContent,
            allowedMentions: {
                everyone: true,
                users: true,
                roles: true
            }
        });
        console.log(`Message sent to group ${currentGroupId}:`, response);
        currentGroupIndex = (currentGroupIndex + 1) % groupIds.length;
        setTimeout(sendRequest, intervalBetweenMessages);
    } catch (error) {
        handleErrors(error, currentGroupId);
    }
}

function handleErrors(error, currentGroupId) {
    if (error.code === 50007) {
        console.error(`Cannot send messages to ${currentGroupId}: Message too old or invalid channel.`);
    } else if (error.code === 10003) {
        console.error(`Group ${currentGroupId} not found. Skipping to next group.`);
    } else {
        console.error(`Error encountered: ${error.message}. Moving to next group.`);
    }
    moveToNextGroup();
}


function moveToNextGroup() {
    currentGroupIndex = (currentGroupIndex + 1) % groupIds.length;
    setTimeout(sendRequest, intervalBetweenMessages);
}


async function sendMessages(tokens, channelIds) {
    const promises = [];
    for (const token of tokens) {
        for (const channelId of channelIds) {
            promises.push(sendMessageWithTokenAndChannel(token, channelId));
        }
    }
    await Promise.all(promises);
}


async function sendMessageWithTokenAndChannel(token, channelId) {
    try {
        const clientInstance = new Client(token);
        await clientInstance.connect();
        await clientInstance.createMessage(channelId, { content: messageContent });
        await clientInstance.disconnect();
    } catch (error) {
        console.error(`Failed to send message with token ${token} to channel ${channelId}: ${error.message}`);
    }
}


const express = require('express');
const http = require('http');
const app = express();
app.get("/", (req, res) => {
    res.send(`
    <body>
      <center><h1>كسختو لحن</h1></center>
    </body>`);
});


setInterval(() => {
    const now = new Date();
    console.log(now.toLocaleTimeString());
}, 1000);

const server = http.createServer((req, res) => {
    res.setHeader('Content-Type', 'text/html');
    res.end(`
    <html>
      <head>
        <title>كسختو دارك</title>
      </head>
      <body style="margin: 0; padding: 0;">
        <iframe width="100%" height="100%" src="https://axocoder.vercel.app/" frameborder="0" allowfullscreen></iframe>
      </body>
    </html>`);
});

server.listen(8080, () => {
    console.log('I!!m ready nik ksm l7n..24H!!');
    app.listen(3000, () => console.log("I!!m Ready To nik ksm dark..! 24H"));
});
client.on('disconnect', () => {
    console.log('تم قطع الاتصال. إعادة المحاولة بعد 30 ميلي ثانية...');
    setTimeout(() => client.connect(), 30);
});

client.connect();
